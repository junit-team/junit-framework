name: Sanitizes assigned labels and milestone on closed issues
on:
  issues:
    types:
      - closed
permissions: {}
jobs:
  label_issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
        with:
          script: |
            const issue = await github.rest.issues.get({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const originalLabels = issue.data.labels.map(l => l.name);
            const newLabels = originalLabels.filter(l => l !== "status: in progress" && l !== "status: new");
            if (newLabels.length !== originalLabels.length) {
              await github.rest.issues.update({
                issue_number: issue.data.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: newLabels,
              });
            }
            if (issue.data.state_reason === "not_planned" || issue.data.state_reason === "duplicate") {
              if (issue.data.milestone) {
                await github.rest.issues.update({
                  issue_number: issue.data.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  milestone: null,
                });
              }
              const statusLabels = newLabels.filter(l => l.startsWith("status: "));
              if (statusLabels.length === 0) {
                if (issue.data.state_reason === "not_planned") {
                  await github.rest.issues.createComment({
                    issue_number: issue.data.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: "Please assign a status label to this issue.",
                  });
                  await github.rest.issues.update({
                    issue_number: issue.data.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    state: "open",
                  });
                } else {
                  newLabels.push("status: duplicate");
                  await github.rest.issues.update({
                    issue_number: issue.data.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    labels: newLabels,
                  });
                }
              }
            } else {
              if (!(newLabels.includes("type: task") || newLabels.includes("type: question")) && !issue.data.milestone) {
                await github.rest.issues.createComment({
                  issue_number: issue.data.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: "Please assign a milestone to this issue or label it with `type: task` or `type: question`.",
                });
                await github.rest.issues.update({
                  issue_number: issue.data.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: "open",
                });
              }
            }
