name: Release

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: Version to be released (e.g. "5.12.0-M1")
        required: true
      stagingRepoId:
        description: ID of the Nexus staging repository (e.g. "orgjunit-1159")
        required: true

permissions: read-all

env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
  STAGING_REPO_URL: https://oss.sonatype.org/service/local/repositories/${{ github.event.inputs.stagingRepoId }}/content

jobs:

  verify_reproducibility:
    name: Verify artifacts are reproducible
    runs-on: ubuntu-24.04 # required to get a recent version of `jc`
    permissions:
      attestations: write # required for build provenance attestation
      id-token: write # required for build provenance attestation
    steps:
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 1
          # TODO ref: "refs/tags/r${{ github.event.inputs.releaseVersion }}"
      - name: Download reference JAR from staging repository
        id: referenceJar
        run: |
          curl --silent --fail --location --output /tmp/reference.jar \
            "${{ env.STAGING_REPO_URL }}/org/junit/jupiter/junit-jupiter-api/${{ github.event.inputs.releaseVersion }}/junit-jupiter-api-${{ github.event.inputs.releaseVersion }}.jar"
          sudo apt-get update && sudo apt-get install --yes jc
          unzip -c /tmp/reference.jar META-INF/MANIFEST.MF | jc --jar-manifest | jq '.[0]' > /tmp/manifest.json
          echo "createdBy=$(jq --raw-output .Created_By /tmp/manifest.json)" >> "$GITHUB_OUTPUT"
          echo "buildTimestamp=$(jq --raw-output .Build_Date /tmp/manifest.json) $(jq --raw-output .Build_Time /tmp/manifest.json)" >> "$GITHUB_OUTPUT"
      - name: Verify artifacts
        uses: ./.github/actions/run-gradle
        with:
          encryptionKey: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          arguments: |
            --rerun-tasks \
            -Pmanifest.buildTimestamp="${{ steps.referenceJar.outputs.buildTimestamp }}" \
            -Pmanifest.createdBy="${{ steps.referenceJar.outputs.createdBy }}" \
            :verifyArtifactsInStagingRepositoryAreReproducible \
            --remote-repo-url=${{ env.STAGING_REPO_URL }}
      - name: Generate build provenance attestations
        uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        with:
          subject-path: build/repo/**/*.jar

  verify_consumability:
    name: Verify artifacts are consumable
    runs-on: ubuntu-latest
    steps:
      - name: Check out samples repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          repository: junit-team/junit5-samples
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
      - name: Set up JDK
        uses: actions/setup-java@7a6d8a8234af8eb26422e24e3006232cccaa061b # v4
        with:
          java-version: 21
          distribution: temurin
      - uses: sbt/setup-sbt@v1
      - name: Update JUnit dependencies in samples
        run: java src/Updater.java ${{ github.event.inputs.releaseVersion }}
      - name: Inject staging repository URL
        run: java src/StagingRepoInjector.java ${{ env.STAGING_REPO_URL }}
      - name: Build samples
        run: java src/Builder.java

  release_staging_repo:
    name: Release staging repository
    needs: [verify_reproducibility, verify_consumability]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 1
          ref: "refs/tags/r${{ github.event.inputs.releaseVersion }}"
      - name: Release staging repository
        uses: ./.github/actions/run-gradle
        with:
          encryptionKey: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          arguments: |
            releaseSonatypeStagingRepository \
            --staging-repository-id=${{ github.event.inputs.stagingRepoId }}
